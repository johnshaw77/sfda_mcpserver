/**
 * MIL ÊúçÂãôÂØ¶‰Ωú
 *
 * Mission in ListÔºàÊ∏ÖÂñÆ‰∏≠ÁöÑ‰ªªÂãôÔºâÔºåË°®Á§∫ÂàÜÈÖçÂà∞Ê∏ÖÂñÆ‰∏äÁöÑ‰ªªÂãôÊàñÂ∞àÊ°à„ÄÇ
 */

import databaseService from "../database.js";
import logger from "../../config/logger.js";

class MILService {
  constructor() {
    this.dbName = "mil";
  }

  /**
   * Áç≤Âèñ MIL ÂàóË°®
   * @param {Object} filters - ÁØ©ÈÅ∏Ê¢ù‰ª∂
   * @param {number} page - È†ÅÊï∏ (È†êË®≠ÁÇ∫ 1)
   * @param {number} limit - ÊØèÈ†ÅËøîÂõûÁµêÊûúÊï∏ÈáèÈôêÂà∂ (È†êË®≠ÁÇ∫ 20)
   * @param {string} sort - ÊéíÂ∫èÊ¨Ñ‰Ωç (È†êË®≠ÁÇ∫ RecordDate)
   * @param {string} status - MIL ËôïÁêÜÁãÄÊÖã (È†êË®≠ÁÇ∫ "OnGoing"ÔºåÂèØÈÅ∏ÂÄº: "OnGoing", "Closed")
   */
  async getMILList(
    filters = {},
    page = 1,
    limit = 20,
    sort = "RecordDate",
    status = "OnGoing",
  ) {
    try {
      console.log("getMILList", { status });
      // ÊßãÂª∫ WHERE Ê¢ù‰ª∂
      const whereConditions = [];

      // Ê∑ªÂä† status ÂèÉÊï∏ËôïÁêÜ
      if (status) {
        whereConditions.push("Status = @status");
      }

      // MIL Typename
      if (filters.typeName) {
        whereConditions.push("TypeName=@typeName");
      }
      // MIL ËôïÁêÜÁãÄÊÖãÁØ©ÈÅ∏ (‰øùÁïôÂéüÊúâÁöÑ filters.status ÊîØÊåÅ)
      if (filters.status) {
        whereConditions.push("Status = @filterStatus");
      }

      // ÊèêÊ°àÂª†Âà•ÁØ©ÈÅ∏
      if (filters.proposalFactory) {
        whereConditions.push("ProposalFactory = @proposalFactory");
      }

      // ÊèêÂá∫‰∫∫ÂßìÂêçÊ®°Á≥äÊü•Ë©¢
      if (filters.proposerName) {
        whereConditions.push("Proposer_Name LIKE @proposerName");
      }

      // MIL Á∑®ËôüÊ®°Á≥äÊü•Ë©¢
      if (filters.serialNumber) {
        whereConditions.push("SerialNumber LIKE @serialNumber");
      }

      // ÈáçË¶ÅÂ∫¶ÁØ©ÈÅ∏
      if (filters.importance) {
        whereConditions.push("Importance = @importance");
      }

      // Âª∂ÈÅ≤Â§©Êï∏ÁØÑÂúçÁØ©ÈÅ∏
      if (filters.delayDayMin !== undefined) {
        whereConditions.push("DelayDay >= @delayDayMin");
      }
      if (filters.delayDayMax !== undefined) {
        whereConditions.push("DelayDay <= @delayDayMax");
      }
      // ÂêëÂæåÂÖºÂÆπËàäÁöÑ delayDay ÂèÉÊï∏
      if (filters.delayDay !== undefined) {
        whereConditions.push("DelayDay >= @delayDay");
      }

      // Ë≤†Ë≤¨‰∫∫Áõ∏ÈóúÁØ©ÈÅ∏
      if (filters.driName) {
        whereConditions.push("DRI_EmpName LIKE @driName");
      }
      if (filters.driEmpNo) {
        whereConditions.push("DRI_EmpNo = @driEmpNo");
      }
      if (filters.driDept) {
        whereConditions.push("DRI_Dept = @driDept");
      }

      // Âú∞ÈªûÁõ∏ÈóúÁØ©ÈÅ∏
      if (filters.location) {
        whereConditions.push("Location LIKE @location");
      }

      // Áî≥Ë´ãÁµêÊ°àÁãÄÊÖãÁØ©ÈÅ∏
      if (filters.isApply) {
        whereConditions.push("is_APPLY = @isApply");
      }

      // Âª∫Êßã WHERE Â≠êÂè•
      const whereClause =
        whereConditions.length > 0
          ? " WHERE " + whereConditions.join(" AND ")
          : "";

      console.log("where", whereClause);
      // Âª∫Êßã‰∏ªË¶ÅÊü•Ë©¢ SQL (Âê´ÂàÜÈ†Å)
      const offset = (page - 1) * limit;
      const mainQuery = `
        SELECT SerialNumber, TypeName, MidTypeName, DelayDay, naqi_num, 
               is_APPLY, Importance, Status, RecordDate, ProposalFactory,
               Proposer_EmpNo, Proposer_Name, Proposer_Dept, Proposer_Superior_Dept,
               DRI_EmpNo, DRI_EmpName, DRI_Dept, DRI_Superior_Dept,
               IssueDiscription, Remark, Location, PlanFinishDate,
               ChangeFinishDate, ActualFinishDate, Solution
        FROM v_mil_kd
        ${whereClause}
        ORDER BY ${sort} DESC
        OFFSET @offset ROWS 
        FETCH NEXT @limit ROWS ONLY
              `;

      console.log("mainQuery", mainQuery);

      // Âª∫ÊßãË®àÊï∏Êü•Ë©¢ SQL
      const countQuery = `SELECT COUNT(*) as total FROM v_mil_kd${whereClause}`;

      // Âü∑Ë°å‰∏ªË¶ÅÊü•Ë©¢
      const mainRequest = databaseService.getPool(this.dbName).request();
      this.setQueryParameters(mainRequest, filters, status);
      // Ê∑ªÂä†ÂàÜÈ†ÅÂèÉÊï∏
      mainRequest.input("offset", offset);
      mainRequest.input("limit", limit);
      const result = await mainRequest.query(mainQuery);

      // Âü∑Ë°åË®àÊï∏Êü•Ë©¢
      const countRequest = databaseService.getPool(this.dbName).request();
      this.setQueryParameters(countRequest, filters, status);
      const countResult = await countRequest.query(countQuery);

      const totalRecords = countResult.recordset[0].total;
      const totalPages = Math.ceil(totalRecords / limit);

      // üìä Ê∑ªÂä†Áµ±Ë®àÊëòË¶ÅÊü•Ë©¢ÔºàÂü∫ÊñºÁõ∏ÂêåÁöÑÁØ©ÈÅ∏Ê¢ù‰ª∂Ôºâ
      const statsQuery = `
        SELECT 
          COUNT(*) as totalCount,
          AVG(CAST(DelayDay as FLOAT)) as avgDelayDays,
          MIN(DelayDay) as minDelayDays,
          MAX(DelayDay) as maxDelayDays,
          SUM(CASE WHEN DelayDay > 10 THEN 1 ELSE 0 END) as highRiskCount,
          SUM(CASE WHEN DelayDay > 0 THEN 1 ELSE 0 END) as delayedCount,
          SUM(CASE WHEN DelayDay <= 0 THEN 1 ELSE 0 END) as onTimeOrEarlyCount,
          COUNT(DISTINCT DRI_EmpName) as uniqueDRICount,
          COUNT(DISTINCT DRI_Dept) as uniqueDeptCount
        FROM v_mil_kd
        ${whereClause}
      `;

      const statsRequest = databaseService.getPool(this.dbName).request();
      this.setQueryParameters(statsRequest, filters, status);
      const statsResult = await statsRequest.query(statsQuery);
      const stats = statsResult.recordset[0];

      // üéØ ÁîüÊàêÊô∫ËÉΩÊëòË¶ÅÊñáÂ≠óÔºàÊ†πÊìöÊï∏ÊìöÂãïÊÖãÁîüÊàêÔºâ
      const generateSummary = (stats, filters) => {
        const summaryParts = [];

        if (filters.delayDayMin !== undefined) {
          summaryParts.push(
            `Âª∂ÈÅ≤Â§©Êï∏ ‚â• ${filters.delayDayMin} Â§©ÁöÑÂ∞àÊ°àÂÖ± ${stats.totalCount} Á≠Ü`,
          );
        } else {
          summaryParts.push(`Êü•Ë©¢Âà∞ ${stats.totalCount} Á≠ÜÂ∞àÊ°à`);
        }

        if (stats.totalCount > 0) {
          summaryParts.push(
            `Âπ≥ÂùáÂª∂ÈÅ≤ ${Math.round(stats.avgDelayDays * 10) / 10} Â§©`,
          );

          if (stats.highRiskCount > 0) {
            summaryParts.push(
              `‚ö†Ô∏è È´òÈ¢®Èö™Â∞àÊ°à ${stats.highRiskCount} Á≠ÜÔºàÂª∂ÈÅ≤>10Â§©Ôºâ`,
            );
          }

          if (stats.delayedCount > 0) {
            summaryParts.push(`Âª∂ÈÅ≤Â∞àÊ°à ${stats.delayedCount} Á≠Ü`);
          }

          summaryParts.push(`Ê∂âÂèä ${stats.uniqueDRICount} ‰ΩçË≤†Ë≤¨‰∫∫`);
          summaryParts.push(`Ê©´Ë∑® ${stats.uniqueDeptCount} ÂÄãÈÉ®ÈñÄ`);
        }

        return summaryParts.join("Ôºå") + "„ÄÇ";
      };

      const intelligentSummary = generateSummary(stats, filters);

      logger.info("MIL ÂàóË°®Êü•Ë©¢ÊàêÂäü", {
        count: result.recordset.length,
        totalRecords: totalRecords,
        page: page,
        totalPages: totalPages,
        status: status,
        filters: JSON.stringify(filters),
        stats: stats,
      });

      return {
        success: true,
        count: result.recordset.length,
        totalRecords: totalRecords,
        currentPage: page,
        totalPages: totalPages,
        limit: limit,
        status: status,
        timestamp: new Date().toISOString(),
        filters: filters,
        data: result.recordset,

        // üìä Êñ∞Â¢ûÔºöÁµ±Ë®àÊëòË¶ÅË≥áË®ä
        statistics: {
          summary: intelligentSummary,
          details: {
            totalCount: stats.totalCount,
            avgDelayDays: Math.round(stats.avgDelayDays * 10) / 10,
            delayRange: {
              min: stats.minDelayDays,
              max: stats.maxDelayDays,
            },
            riskAnalysis: {
              highRisk: stats.highRiskCount, // Âª∂ÈÅ≤ > 10 Â§©
              delayed: stats.delayedCount, // Âª∂ÈÅ≤ > 0 Â§©
              onTimeOrEarly: stats.onTimeOrEarlyCount, // Âª∂ÈÅ≤ <= 0 Â§©
            },
            responsibility: {
              uniqueDRICount: stats.uniqueDRICount,
              uniqueDeptCount: stats.uniqueDeptCount,
            },
          },
        },
      };
    } catch (error) {
      logger.error("MIL ÂàóË°®Êü•Ë©¢Â§±Êïó", {
        error: error.message,
        stack: error.stack,
      });
      throw error;
    }
  }

  /**
   * Ë®≠ÂÆöÊü•Ë©¢ÂèÉÊï∏ÁöÑËºîÂä©ÊñπÊ≥ï
   * @param {Object} request - MSSQL request Áâ©‰ª∂
   * @param {Object} filters - ÁØ©ÈÅ∏Ê¢ù‰ª∂
   * @param {string} status - MIL ËôïÁêÜÁãÄÊÖã
   */
  setQueryParameters(request, filters, status) {
    // Ê∑ªÂä† status ÂèÉÊï∏
    if (status) {
      request.input("status", status);
    }

    if (filters.typeName) {
      request.input("typeName", filters.typeName);
    }

    // ‰øùÁïôÂéüÊúâÁöÑ filters.status ÊîØÊåÅÔºå‰ΩøÁî®‰∏çÂêåÁöÑÂèÉÊï∏ÂêçÈÅøÂÖçË°ùÁ™Å
    if (filters.status) {
      request.input("filterStatus", filters.status);
    }

    if (filters.proposalFactory) {
      request.input("proposalFactory", filters.proposalFactory);
    }

    if (filters.proposerName) {
      request.input("proposerName", "%" + filters.proposerName + "%");
    }

    if (filters.serialNumber) {
      request.input("serialNumber", "%" + filters.serialNumber + "%");
    }

    if (filters.importance) {
      request.input("importance", filters.importance);
    }

    // Âª∂ÈÅ≤Â§©Êï∏ÁØÑÂúçÂèÉÊï∏
    if (filters.delayDayMin !== undefined) {
      request.input("delayDayMin", filters.delayDayMin);
    }
    if (filters.delayDayMax !== undefined) {
      request.input("delayDayMax", filters.delayDayMax);
    }
    // ÂêëÂæåÂÖºÂÆπ
    if (filters.delayDay !== undefined) {
      request.input("delayDay", filters.delayDay);
    }

    // Ë≤†Ë≤¨‰∫∫Áõ∏ÈóúÂèÉÊï∏
    if (filters.driName) {
      request.input("driName", "%" + filters.driName + "%");
    }
    if (filters.driEmpNo) {
      request.input("driEmpNo", filters.driEmpNo);
    }
    if (filters.driDept) {
      request.input("driDept", filters.driDept);
    }

    // Âú∞ÈªûÁõ∏ÈóúÂèÉÊï∏
    if (filters.location) {
      request.input("location", "%" + filters.location + "%");
    }

    // Áî≥Ë´ãÁµêÊ°àÁãÄÊÖãÂèÉÊï∏
    if (filters.isApply) {
      request.input("isApply", filters.isApply);
    }
  }

  /**
   * Áç≤ÂèñÁâπÂÆö MIL Ë©≥ÊÉÖ
   * @param {string} serialNumber - MIL Á∑®Ëôü
   */
  async getMILDetails(serialNumber) {
    try {
      const request = databaseService.getPool(this.dbName).request();
      request.input("serialNumber", serialNumber);

      const sql = "SELECT * FROM v_mil_kd WHERE SerialNumber = @serialNumber";
      const result = await request.query(sql);

      if (result.recordset.length === 0) {
        logger.warn("Êâæ‰∏çÂà∞ÊåáÂÆöÁöÑ MIL", { serialNumber });
        throw new Error(`Êâæ‰∏çÂà∞ MIL Á∑®Ëôü: ${serialNumber}`);
      }

      logger.info("MIL Ë©≥ÊÉÖÊü•Ë©¢ÊàêÂäü", { serialNumber });

      return {
        timestamp: new Date().toISOString(),
        data: result.recordset[0], // Áµ±‰∏ÄÂ≠óÊÆµ
      };
    } catch (error) {
      logger.error("MIL Ë©≥ÊÉÖÊü•Ë©¢Â§±Êïó", {
        serialNumber,
        error: error.message,
        stack: error.stack,
      });
      throw error;
    }
  }

  /**
   * ÂèñÂæó MIL ËôïÁêÜÁãÄÊÖãÁµ±Ë®àÂ†±Âëä
   */
  async getStatusReport() {
    try {
      const sql = `
        SELECT 
          Status, 
          COUNT(*) as Count,
          AVG(DATEDIFF(day, RecordDate, GETDATE())) as AvgDays
        FROM 
          v_mil_kd 
        GROUP BY 
          Status
      `;

      const result = await databaseService
        .getPool(this.dbName)
        .request()
        .query(sql);

      logger.info("MIL ÁãÄÊÖãÂ†±ÂëäÊü•Ë©¢ÊàêÂäü", {
        reportCount: result.recordset.length,
      });

      return {
        timestamp: new Date().toISOString(),
        data: result.recordset, // Áµ±‰∏ÄÂ≠óÊÆµ
      };
    } catch (error) {
      logger.error("MIL ÁãÄÊÖãÂ†±ÂëäÊü•Ë©¢Â§±Êïó", {
        error: error.message,
        stack: error.stack,
      });
      throw error;
    }
  }

  /**
   * @tool-name ÂèñÂæó MIL È°ûÂûãÂàóË°®
   * @returns {Array} MIL È°ûÂûãÂàóË°®
   * @description Áç≤ÂèñÊâÄÊúâ MIL È°ûÂûãÁöÑÂîØ‰∏ÄÂàóË°®v
   */
  async getMILTypeList() {
    try {
      const sql = `
        SELECT DISTINCT TypeName 
        FROM v_mil_kd 
        ORDER BY TypeName
      `;

      const result = await databaseService
        .getPool(this.dbName)
        .request()
        .query(sql);

      logger.info("MIL È°ûÂûãÂàóË°®Êü•Ë©¢ÊàêÂäü", {
        typeCount: result.recordset.length,
      });

      return {
        timestamp: new Date().toISOString(),
        data: result.recordset.map(row => row.TypeName), // Áµ±‰∏ÄÂ≠óÊÆµ
      };
    } catch (error) {
      logger.error("MIL È°ûÂûãÂàóË°®Êü•Ë©¢Â§±Êïó", {
        error: error.message,
        stack: error.stack,
      });
      throw error;
    }
  }

  /**
   * ‰æùÊåáÂÆöÊ¨Ñ‰ΩçÁµ±Ë®à MIL Á∏ΩÊï∏
   * @tool-name get-count-by
   * @tool-description ‰æùÊåáÂÆöÊ¨Ñ‰ΩçÔºàÂ¶ÇÁãÄÊÖã„ÄÅÈ°ûÂûã„ÄÅÂª†Âà•Á≠âÔºâÁµ±Ë®à MIL Ë®òÈåÑÊï∏ÈáèÔºåÁî®ÊñºÊï∏ÊìöÂàÜÊûêÂíåÂ†±Ë°®ÁîüÊàê
   * @param {string} columnName - Ë¶ÅÁµ±Ë®àÁöÑÊ¨Ñ‰ΩçÂêçÁ®±ÔºàÂ¶Ç Status„ÄÅTypeName„ÄÅProposalFactory Á≠âÔºâ
   * @returns {Object} ÂåÖÂê´Áµ±Ë®àÁµêÊûúÁöÑÁâ©‰ª∂
   */
  async getCountBy(columnName) {
    try {
      const sql = `select ${columnName},count(*) as totalCount from v_mil_kd
             group by ${columnName}`;
      const result = await databaseService
        .getPool(this.dbName)
        .request()
        .query(sql);
      logger.info("MIL ‰æùÁâπÂÆöÊ¨Ñ‰ΩçÁµ±Ë®àÊü•Ë©¢ÊàêÂäü", {
        columnCount: result.recordset.length,
      });

      return {
        timestamp: new Date().toISOString(),
        data: result.recordset, // Áµ±‰∏ÄÂ≠óÊÆµ
      };
    } catch (error) {
      logger.error("MIL ‰æùÁâπÂÆöÊ¨Ñ‰ΩçÁµ±Ë®àÊü•Ë©¢Â§±Êïó", {
        error: error.message,
        stack: error.stack,
      });
      throw error;
    }
  }
}

// ÂâµÂª∫ÂñÆ‰æãÂØ¶‰æã
const milService = new MILService();

export default milService;

# MCP Server Docker Compose 配置
# 企業級 AI + MCP 系統的容器編排文件

services:
  # ================================================
  # MCP Server 主服務
  # ================================================
  mcp-server:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
    container_name: mcp-server
    restart: unless-stopped

    # 環境配置
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - TZ=Asia/Taipei

    # 埠號映射
    ports:
      - "${MCP_PORT:-8080}:8080"

    # 磁碟掛載
    volumes:
      - ./logs:/app/logs
      - ./mcp-server/.env:/app/.env:ro

    # 健康檢查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # 資源限制
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

    # 網路配置
    networks:
      - mcp-network

    # 日誌配置
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ================================================
  # Nginx 反向代理 (可選)
  # ================================================
  nginx:
    image: nginx:alpine
    container_name: mcp-nginx
    restart: unless-stopped

    ports:
      - "80:80"
      - "443:443"

    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx

    depends_on:
      mcp-server:
        condition: service_healthy

    networks:
      - mcp-network

    # 只有在需要時才啟用
    profiles:
      - nginx

  # ================================================
  # Qwen-Agent Gradio UI
  # ================================================
  qwen-agent-ui:
    build:
      context: ./qwen_agent_poc
      dockerfile: Dockerfile
    container_name: qwen-agent-ui
    restart: unless-stopped

    ports:
      - "7860:7860"

    environment:
      # MCP Server 連接配置
      - MCP_SERVER_URL=http://mcp-server:8080
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      
      # Gradio 配置
      - GRADIO_SERVER_NAME=0.0.0.0
      - GRADIO_SERVER_PORT=7860
      - GRADIO_SHARE=false
      
      # Agent 配置
      - AGENT_NAME=SFDA智能助理
      - AGENT_DESCRIPTION=基於Qwen大語言模型的企業級智能助理
      
      # 日誌配置
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1

    volumes:
      # 對話歷史持久化
      - qwen-agent-data:/app/logs
      - qwen-agent-exports:/app/exports

    networks:
      - mcp-network

    depends_on:
      mcp-server:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7860"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    # 只有在需要時才啟用
    profiles:
      - qwen-agent

    labels:
      - "com.sfda.service=qwen-agent-ui"
      - "com.sfda.component=ai-interface"
      - "com.sfda.version=1.0.0"

  # ================================================
  # Redis 快取
  # ================================================
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    restart: unless-stopped

    ports:
      - "6379:6379"

    volumes:
      - redis-data:/data

    command: redis-server --appendonly yes

    networks:
      - mcp-network

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

    # 預設啟動（移除 profiles，因為 Qwen-Agent 需要）

  # ================================================
  # PostgreSQL 資料庫 (未來擴展)
  # ================================================
  postgres:
    image: postgres:15-alpine
    container_name: mcp-postgres
    restart: unless-stopped

    ports:
      - "5432:5432"

    environment:
      POSTGRES_DB: ${DB_NAME:-mcp_db}
      POSTGRES_USER: ${DB_USER:-mcp_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-mcp_password}
      TZ: Asia/Taipei

    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro

    networks:
      - mcp-network

    # 只有在需要時才啟用
    profiles:
      - database

  # ================================================
  # 監控服務 (Prometheus + Grafana)
  # ================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    restart: unless-stopped

    ports:
      - "9090:9090"

    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
      - prometheus-data:/prometheus

    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"

    networks:
      - mcp-network

    # 只有在需要時才啟用
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    restart: unless-stopped

    ports:
      - "4000:3000"

    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      TZ: Asia/Taipei

    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro

    depends_on:
      - prometheus

    networks:
      - mcp-network

    # 只有在需要時才啟用
    profiles:
      - monitoring

# ================================================
# 網路定義
# ================================================
networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================================
# 磁碟區定義
# ================================================
volumes:
  # 日誌磁碟區
  logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs

  # Redis 資料
  redis-data:
    driver: local

  # PostgreSQL 資料
  postgres-data:
    driver: local

  # Prometheus 資料
  prometheus-data:
    driver: local

  # Grafana 資料
  grafana-data:
    driver: local

  # Qwen-Agent 資料
  qwen-agent-data:
    driver: local

  # Qwen-Agent 匯出
  qwen-agent-exports:
    driver: local
